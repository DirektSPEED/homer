#!/usr/bin/env node
var endpoint = require('../lib/endpoint')
  , HomerClient = require('../lib/client');

var cmds = {
  'register': {
    demand: ['h', 'p', 'l'],
    handler: function (argv) {
      var client = new HomerClient(argv.s, argv.l);
      client.register(argv.h, argv.p, function (err) {
        if (err) throw err;
        console.log('Registration successful');
      });
    }
  },
  'update': {
    demand: ['h', 'p', 'l'],
    handler: function (argv) {
      var client = new HomerClient(argv.s, argv.l);
      client.update(argv.h, argv.p, argv.i, function (err) {
        if (err) throw err;
        console.log('IP Address Update successful');
      });
    }
  },
  'delete': {
    demand: ['h', 'p', 'l'],
    handler: function (argv) {
      var client = new HomerClient(argv.s, argv.l);
      client.delete(argv.h, argv.p, function (err) {
        if (err) throw err;
        console.log('IP Address Deletion successful');
      });
    }
  },
  'ip': {
    demand: ['s', 'l'],
    handler: function (argv) {
      var client = new HomerClient(argv.s, argv.l);
      client.ip(function (err, res) {
        if (err) throw err;
        console.log('Your IP address is: ' + res.ip);
      });
    }
  },
  'lookup': {
    demand: ['h', 'p', 'l'],
    handler: function (argv) {
      var client = new HomerClient(argv.s, argv.l);
      client.lookup(argv.h, argv.p, function (err, res) {
        if (err) throw err;
        console.log('Your registered IP address is: ' + res.ip);
      });
    }
  },
  'start': {
    demand: ['l', 'd', 's'],
    handler: function (argv) {
      server = endpoint.create();
      server.app.listen(argv.l, argv.s, function (err) {
        server.dnsServer.serve(argv.d, argv.s);
        console.log('Server listening on HTTP host ' + argv.s + ':' + argv.l +
          ' and DNS port ' + argv.d);
      });
    }
  }
};

var optimist = require('optimist')
  .usage(
    'Usage: $0 <command>\n\n' +
    '$0 register -h [hostname] -p [password]\n' +
    '$0 update -h [hostname] -p [password]\n' +
    '$0 delete -h [hostname] -p [password]\n' +
    '$0 ip\n' +
    '$0 update -h [hostname] -i [ip] -p [password]\n' +
    '$0 lookup -h [hostname] -p [password]\n' +
    '$0 start'
  )
  .option('h', {
    alias: 'hostname',
    describe: 'The DNS hostname'
  })
  .option('p', {
    alias: 'password',
    describe: 'Your password'
  })
  .option('l', {
    alias: 'listen',
    describe: 'HTTP port to listen to',
    default: 3000
  })
  .option('d', {
    alias: 'dnsport',
    describe: 'DNS port to listen to',
    default: 15353
  })
  .option('s', {
    alias: 'server',
    describe: 'HTTP server host to query against',
    default: '127.0.0.1'
  })
  .option('i', {
    alias: 'ip',
    describe: 'The IP address to set. By default it will take the IP address of the client'
  })
  .check(checkUsage);

var argv = optimist.argv;

function checkUsage(argv) {
  if (!argv._.length || !(argv._[0] in cmds)) {
    throw new Error('Must provide a valid <cmd>');
    return false;
  }

  var cmd = cmds[argv._[0]];
  if (cmd.demand && cmd.demand.length) {
    var missing = [];

    cmd.demand.forEach(function (key) {
      if (!argv[key]) missing.push(key);
    });

    if (missing.length) {
      throw new Error('Missing required arguments: ' + missing.join(', '));
    }
  }
}

if (argv._ && argv._.length) {
  cmds[argv._[0]].handler && cmds[argv._[0]].handler(argv);
}
// vim: ft=javascript
